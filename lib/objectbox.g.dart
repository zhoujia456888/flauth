// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/address_model.dart';
import 'model/password_model.dart';
import 'model/totp_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 9204818892601247042),
    name: 'TotpModel',
    lastPropertyId: const obx_int.IdUid(9, 3261423443389642500),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3690063167725182683),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5769243821457969720),
        name: 'issuer',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8225870529813252938),
        name: 'userName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5204935102804593244),
        name: 'secret',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6976882790237127712),
        name: 'code',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4517061471083371318),
        name: 'isShow',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 972511108111383730),
        name: 'iconPath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1689211252785743620),
        name: 'countdownTime',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 3261423443389642500),
        name: 'initialTime',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3193809485662389233),
    name: 'PasswordModel',
    lastPropertyId: const obx_int.IdUid(6, 6930293713525812901),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8748619518302563592),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1595797731988256348),
        name: 'title',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 1896896659804933879),
        name: 'url',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3534760878925080897),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 7621586462409547514),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6930293713525812901),
        name: 'isShow',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 4194405384842072034),
    name: 'AddressModel',
    lastPropertyId: const obx_int.IdUid(8, 3484016536537041126),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9044073923837612921),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 210066450323233406),
        name: 'postalCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1508025185536675864),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 193567719603955634),
        name: 'username',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6318118710950425539),
        name: 'tag',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 7387854410452878744),
        name: 'isShow',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3484016536537041126),
        name: 'phoneNumber',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(3, 4194405384842072034),
    lastIndexId: const obx_int.IdUid(0, 0),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [988011290617105160],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    TotpModel: obx_int.EntityDefinition<TotpModel>(
      model: _entities[0],
      toOneRelations: (TotpModel object) => [],
      toManyRelations: (TotpModel object) => {},
      getId: (TotpModel object) => object.id,
      setId: (TotpModel object, int id) {
        object.id = id;
      },
      objectToFB: (TotpModel object, fb.Builder fbb) {
        final issuerOffset = object.issuer == null
            ? null
            : fbb.writeString(object.issuer!);
        final userNameOffset = object.userName == null
            ? null
            : fbb.writeString(object.userName!);
        final secretOffset = object.secret == null
            ? null
            : fbb.writeString(object.secret!);
        final codeOffset = object.code == null
            ? null
            : fbb.writeString(object.code!);
        final iconPathOffset = object.iconPath == null
            ? null
            : fbb.writeString(object.iconPath!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, issuerOffset);
        fbb.addOffset(2, userNameOffset);
        fbb.addOffset(3, secretOffset);
        fbb.addOffset(4, codeOffset);
        fbb.addBool(5, object.isShow);
        fbb.addOffset(6, iconPathOffset);
        fbb.addFloat64(7, object.countdownTime);
        fbb.addFloat64(8, object.initialTime);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final issuerParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final userNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final secretParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final codeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final isShowParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final iconPathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 16);
        final countdownTimeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final initialTimeParam = const fb.Float64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final object = TotpModel(
          id: idParam,
          issuer: issuerParam,
          userName: userNameParam,
          secret: secretParam,
          code: codeParam,
          isShow: isShowParam,
          iconPath: iconPathParam,
          countdownTime: countdownTimeParam,
          initialTime: initialTimeParam,
        );

        return object;
      },
    ),
    PasswordModel: obx_int.EntityDefinition<PasswordModel>(
      model: _entities[1],
      toOneRelations: (PasswordModel object) => [],
      toManyRelations: (PasswordModel object) => {},
      getId: (PasswordModel object) => object.id,
      setId: (PasswordModel object, int id) {
        object.id = id;
      },
      objectToFB: (PasswordModel object, fb.Builder fbb) {
        final titleOffset = object.title == null
            ? null
            : fbb.writeString(object.title!);
        final urlOffset = object.url == null
            ? null
            : fbb.writeString(object.url!);
        final usernameOffset = object.username == null
            ? null
            : fbb.writeString(object.username!);
        final passwordOffset = object.password == null
            ? null
            : fbb.writeString(object.password!);
        fbb.startTable(7);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(1, titleOffset);
        fbb.addOffset(2, urlOffset);
        fbb.addOffset(3, usernameOffset);
        fbb.addOffset(4, passwordOffset);
        fbb.addBool(5, object.isShow);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          4,
        );
        final titleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 6);
        final urlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final isShowParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          14,
        );
        final object = PasswordModel(
          id: idParam,
          title: titleParam,
          url: urlParam,
          username: usernameParam,
          password: passwordParam,
          isShow: isShowParam,
        );

        return object;
      },
    ),
    AddressModel: obx_int.EntityDefinition<AddressModel>(
      model: _entities[2],
      toOneRelations: (AddressModel object) => [],
      toManyRelations: (AddressModel object) => {},
      getId: (AddressModel object) => object.id,
      setId: (AddressModel object, int id) {
        object.id = id;
      },
      objectToFB: (AddressModel object, fb.Builder fbb) {
        final postalCodeOffset = object.postalCode == null
            ? null
            : fbb.writeString(object.postalCode!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final usernameOffset = object.username == null
            ? null
            : fbb.writeString(object.username!);
        final tagOffset = object.tag == null
            ? null
            : fbb.writeString(object.tag!);
        final phoneNumberOffset = object.phoneNumber == null
            ? null
            : fbb.writeString(object.phoneNumber!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id ?? 0);
        fbb.addOffset(2, postalCodeOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, usernameOffset);
        fbb.addOffset(5, tagOffset);
        fbb.addBool(6, object.isShow);
        fbb.addOffset(7, phoneNumberOffset);
        fbb.finish(fbb.endTable());
        return object.id ?? 0;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final postalCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final usernameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final phoneNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final tagParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final isShowParam = const fb.BoolReader().vTableGetNullable(
          buffer,
          rootOffset,
          16,
        );
        final object = AddressModel(
          postalCode: postalCodeParam,
          address: addressParam,
          username: usernameParam,
          phoneNumber: phoneNumberParam,
          tag: tagParam,
          isShow: isShowParam,
        )..id = const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [TotpModel] entity fields to define ObjectBox queries.
class TotpModel_ {
  /// See [TotpModel.id].
  static final id = obx.QueryIntegerProperty<TotpModel>(
    _entities[0].properties[0],
  );

  /// See [TotpModel.issuer].
  static final issuer = obx.QueryStringProperty<TotpModel>(
    _entities[0].properties[1],
  );

  /// See [TotpModel.userName].
  static final userName = obx.QueryStringProperty<TotpModel>(
    _entities[0].properties[2],
  );

  /// See [TotpModel.secret].
  static final secret = obx.QueryStringProperty<TotpModel>(
    _entities[0].properties[3],
  );

  /// See [TotpModel.code].
  static final code = obx.QueryStringProperty<TotpModel>(
    _entities[0].properties[4],
  );

  /// See [TotpModel.isShow].
  static final isShow = obx.QueryBooleanProperty<TotpModel>(
    _entities[0].properties[5],
  );

  /// See [TotpModel.iconPath].
  static final iconPath = obx.QueryStringProperty<TotpModel>(
    _entities[0].properties[6],
  );

  /// See [TotpModel.countdownTime].
  static final countdownTime = obx.QueryDoubleProperty<TotpModel>(
    _entities[0].properties[7],
  );

  /// See [TotpModel.initialTime].
  static final initialTime = obx.QueryDoubleProperty<TotpModel>(
    _entities[0].properties[8],
  );
}

/// [PasswordModel] entity fields to define ObjectBox queries.
class PasswordModel_ {
  /// See [PasswordModel.id].
  static final id = obx.QueryIntegerProperty<PasswordModel>(
    _entities[1].properties[0],
  );

  /// See [PasswordModel.title].
  static final title = obx.QueryStringProperty<PasswordModel>(
    _entities[1].properties[1],
  );

  /// See [PasswordModel.url].
  static final url = obx.QueryStringProperty<PasswordModel>(
    _entities[1].properties[2],
  );

  /// See [PasswordModel.username].
  static final username = obx.QueryStringProperty<PasswordModel>(
    _entities[1].properties[3],
  );

  /// See [PasswordModel.password].
  static final password = obx.QueryStringProperty<PasswordModel>(
    _entities[1].properties[4],
  );

  /// See [PasswordModel.isShow].
  static final isShow = obx.QueryBooleanProperty<PasswordModel>(
    _entities[1].properties[5],
  );
}

/// [AddressModel] entity fields to define ObjectBox queries.
class AddressModel_ {
  /// See [AddressModel.id].
  static final id = obx.QueryIntegerProperty<AddressModel>(
    _entities[2].properties[0],
  );

  /// See [AddressModel.postalCode].
  static final postalCode = obx.QueryStringProperty<AddressModel>(
    _entities[2].properties[1],
  );

  /// See [AddressModel.address].
  static final address = obx.QueryStringProperty<AddressModel>(
    _entities[2].properties[2],
  );

  /// See [AddressModel.username].
  static final username = obx.QueryStringProperty<AddressModel>(
    _entities[2].properties[3],
  );

  /// See [AddressModel.tag].
  static final tag = obx.QueryStringProperty<AddressModel>(
    _entities[2].properties[4],
  );

  /// See [AddressModel.isShow].
  static final isShow = obx.QueryBooleanProperty<AddressModel>(
    _entities[2].properties[5],
  );

  /// See [AddressModel.phoneNumber].
  static final phoneNumber = obx.QueryStringProperty<AddressModel>(
    _entities[2].properties[6],
  );
}
